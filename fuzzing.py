# -*- coding: utf-8 -*-
"""Fuzzing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dwPrUan9jXa_eNZsvBci9LQMJSIv-nbV

Importing libraries
"""

#Fuzzer
import atheris
import sys
with atheris.instrument_imports():
  #Library to fuzz
  import skimage.color 
  from skimage.color import rgb2gray

#To convert image to bytes and back
from io import BytesIO

#Image loader
from PIL import Image
import numpy as np

#Load image
# sampled = Image.open("sampled.jpg")
# made = Image.open("made.jpg")
# empty = Image.open("empty.jpg")

def convert_image_to_bytes(image):
  roi_img = image
  img_byte_arr = BytesIO()
  roi_img.save(img_byte_arr, format='JPEG')
  img_byte_arr = img_byte_arr.getvalue()
  return img_byte_arr

def convert_bytes_to_image(img_byte_arr):
  return Image.open(BytesIO(img_byte_arr))

def convert_PIL_to_arr(image):
  return np.array(im.getdata()).reshape(pic.size[0], pic.size[1], 3)

def TestInputData(input_bytes):
  fdp = atheris.FuzzedDataProvider(input_bytes)
  data = fdp.ConsumeBytes(sys.maxsize)

  try: 
    image = convert_bytes_to_image(data)
    image = convert_PIL_to_arr(image)
    rgb2gray(image)

  except UnicodeDecodeError:
    pass 
    
  except Exception:
      input_type = str(type(data))
      sys.stderr.write(
          "Input was {input_type}: {data}\n".format(
              input_type=input_type, data=data))
      raise

def main():
  sampled = Image.open("sampled.jpg")
  made = Image.open("made.jpg")
  empty = Image.open("empty.jpg")
  input = [convert_image_to_bytes(sampled)]
  atheris.Setup(input, TestInputData)
  atheris.Fuzz()

if __name__ == "__main__":
  main()